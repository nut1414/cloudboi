#!/bin/bash

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
SCRIPTS_DIR="$SCRIPT_DIR/scripts"

# Function to check if scripts directory exists
check_scripts_dir() {
    if [ ! -d "$SCRIPTS_DIR" ]; then
        echo -e "${RED}Error: Scripts directory not found at $SCRIPTS_DIR${NC}"
        exit 1
    fi
}

# Function to check if running as root
check_root() {
    if [[ $(/usr/bin/id -u) -ne 0 ]]; then
        echo -e "${RED}Error: This command must be run as root${NC}"
        exit 1
    fi
}

# Function to check if snap is installed
check_snap() {
    if ! [ -x "$(command -v snap)" ]; then
        echo -e "${RED}Error: snap is not installed (install using 'sudo apt install snapd')${NC}"
        exit 1
    fi
}

# Function to check if specific snap is installed
check_snap_installed() {
    local snap_name="$1"
    if ! snap list | grep -q "^$snap_name "; then
        echo -e "${RED}Error: $snap_name snap is not installed${NC}"
        exit 1
    fi
}

# Function to display help
show_help() {
    echo -e "${GREEN}CloudBoi CLI - Infrastructure Management Tool${NC}"
    echo
    echo "Usage: $0 <command> [options]"
    echo
    echo "Commands:"
    echo "  init-maas     Initialize MAAS (Metal As A Service)"
    echo "  init-lxd      Initialize LXD cluster"
    echo "  clear-maas    Remove MAAS and its dependencies"
    echo "  gen-cloudinit Generate cloud-init configuration"
    echo "  help          Show this help message"
    echo
    echo "Options:"
    echo "  --username    MAAS admin username (default: admin)"
    echo "  --password    MAAS admin password (default: admin)"
    echo "  --email       MAAS admin email (default: admin@example.com)"
    echo "  --channel     LXD snap channel (default: 5.21/stable)"
}

# Function to initialize MAAS
init_maas() {
    check_root
    check_snap
    
    # Default values
    MAAS_ADMIN_USERNAME="admin"
    MAAS_ADMIN_PASSWORD="admin"
    MAAS_ADMIN_EMAIL="admin@example.com"
    
    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            --username)
                MAAS_ADMIN_USERNAME="$2"
                shift 2
                ;;
            --password)
                MAAS_ADMIN_PASSWORD="$2"
                shift 2
                ;;
            --email)
                MAAS_ADMIN_EMAIL="$2"
                shift 2
                ;;
            *)
                echo -e "${RED}Unknown option: $1${NC}"
                show_help
                exit 1
                ;;
        esac
    done
    
    echo -e "${YELLOW}Initializing MAAS with:${NC}"
    echo "Username: $MAAS_ADMIN_USERNAME"
    echo "Email: $MAAS_ADMIN_EMAIL"
    
    # Export variables for the script
    export MAAS_ADMIN_USERNAME
    export MAAS_ADMIN_PASSWORD
    export MAAS_ADMIN_EMAIL
    
    # Run the init_maas.sh script
    "$SCRIPTS_DIR/init_maas.sh"
}

# Function to initialize LXD
init_lxd() {
    check_root
    check_snap
    
    # Default value
    DEFAULT_LXD_CHANNEL="5.21/stable"
    
    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            --channel)
                DEFAULT_LXD_CHANNEL="$2"
                shift 2
                ;;
            *)
                echo -e "${RED}Unknown option: $1${NC}"
                show_help
                exit 1
                ;;
        esac
    done
    
    echo -e "${YELLOW}Initializing LXD with channel: $DEFAULT_LXD_CHANNEL${NC}"
    
    # Export variable for the script
    export DEFAULT_LXD_CHANNEL
    
    # Run the init_main_lxd.sh script
    "$SCRIPTS_DIR/init_main_lxd.sh"
}

# Function to clear MAAS
clear_maas() {
    check_root
    check_snap
    
    echo -e "${YELLOW}Warning: This will remove MAAS and all its dependencies${NC}"
    if [ "$1" != "--force" ]; then
        read -p "Are you sure you want to continue? (y/N) " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            echo -e "${YELLOW}Operation cancelled${NC}"
            exit 0
        fi
    fi
    
    # Run the clear_maas.sh script
    "$SCRIPTS_DIR/clear_maas.sh"
}

# Function to generate cloud-init configuration
gen_cloudinit() {
    check_root
    check_snap
    
    # Check if required snaps are installed
    check_snap_installed "maas"
    check_snap_installed "lxd"
    
    echo -e "${YELLOW}Generating cloud-init configuration...${NC}"
    
    # Run the gen_cloudinit.sh script
    "$SCRIPTS_DIR/gen_cloudinit.sh"
}

# Main command handling
if [ $# -eq 0 ]; then
    show_help
    exit 0
fi

# Check if scripts directory exists before proceeding
check_scripts_dir

case "$1" in
    init-maas)
        shift
        init_maas "$@"
        ;;
    init-lxd)
        shift
        init_lxd "$@"
        ;;
    clear-maas)
        shift
        clear_maas "$@"
        ;;
    gen-cloudinit)
        shift
        gen_cloudinit "$@"
        ;;
    help|--help|-h)
        show_help
        ;;
    *)
        echo -e "${RED}Unknown command: $1${NC}"
        show_help
        exit 1
        ;;
esac 