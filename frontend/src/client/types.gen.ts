// This file is auto-generated by @hey-api/openapi-ts

export type AddMemberRequest = {
    server_name: string;
};

export type AddMemberResponse = {
    success: boolean;
};

export type AdminInstancePlan = {
    instance_plan_id: number;
    instance_package_name: string;
    vcpu_amount: number;
    ram_amount: number;
    storage_amount: number;
    cost_hour: number;
    is_editable: boolean;
};

export type AdminInstancePlanCreateRequest = {
    instance_plan_id?: (number | null);
    instance_package_name: string;
    vcpu_amount: number;
    ram_amount: number;
    storage_amount: number;
    cost_hour: number;
};

export type AdminInstancePlanCreateResponse = {
    instance_plan_id: number;
    instance_package_name: string;
    vcpu_amount: number;
    ram_amount: number;
    storage_amount: number;
    cost_hour: number;
};

export type AdminInstancePlanDeleteRequest = {
    instance_plan_id: number;
    instance_package_name: string;
    vcpu_amount: number;
    ram_amount: number;
    storage_amount: number;
    cost_hour: number;
};

export type AdminInstancePlanDeleteResponse = {
    instance_plan_id: number;
    instance_package_name: string;
    is_success: boolean;
};

export type AdminInstancePlanUpdateRequest = {
    instance_plan_id: number;
    instance_package_name: string;
    vcpu_amount: number;
    ram_amount: number;
    storage_amount: number;
    cost_hour: number;
};

export type AdminInstancePlanUpdateResponse = {
    instance_plan_id: number;
    instance_package_name: string;
    vcpu_amount: number;
    ram_amount: number;
    storage_amount: number;
    cost_hour: number;
};

export type AdminUser = {
    user_id: string;
    username: string;
    email: string;
    role: UserRole;
    instances: Array<UserInstanceFromDB>;
};

export type AdminUsersResponse = {
    users: Array<AdminUser>;
};

export type AllTimePayment = {
    sum_amount: number;
    total_cycle: number;
    last_payment_date: string;
};

export type BaseInstanceState = {
    network?: ({
    [key: string]: NetworkInterface;
} | null);
    disk: {
        [key: string]: DiskUsage;
    };
    memory: MemoryUsage;
    cpu: CPUUsage;
};

export type ClusterMember = {
    server_name: string;
    storage_pools: {
        [key: string]: StoragePoolState;
    };
    sysinfo: SysInfo;
    status: string;
    message: string;
    url: string;
    roles: Array<(string)>;
    groups: Array<(string)>;
};

export type CPUUsage = {
    usage: number;
    cores: number;
};

export type CreateJoinTokenRequest = {
    server_name: string;
};

export type CreateJoinTokenResponse = {
    join_token: string;
};

export type DiskUsage = {
    usage: number;
};

export type GetClusterMembersStateInfoResponse = {
    members: Array<ClusterMember>;
    members_leader: string;
    members_groups: Array<(string)>;
    members_roles: Array<(string)>;
};

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type InstanceControlResponse = {
    instance_id: string;
    instance_name: string;
    is_success: boolean;
};

export type InstanceCreateRequest = {
    os_type: OsType;
    instance_plan: InstancePlan;
    instance_name: string;
    root_password: string;
};

export type InstanceCreateResponse = {
    instance_name: string;
    instance_status: string;
    created_at: Date;
};

export type InstanceDetails = {
    instance_package: Array<InstancePlan>;
    os_image: Array<OsType>;
};

export type InstancePlan = {
    instance_plan_id: number;
    instance_package_name: string;
    vcpu_amount: number;
    ram_amount: number;
    storage_amount: number;
    cost_hour: number;
};

export type MemoryUsage = {
    usage: number;
    total: number;
};

export type NetworkAddress = {
    family: string;
    address: string;
    netmask: string;
    scope: string;
};

export type NetworkCounters = {
    bytes_received: number;
    bytes_sent: number;
    packets_received: number;
    packets_sent: number;
};

export type NetworkInterface = {
    addresses: Array<NetworkAddress>;
    counters: NetworkCounters;
    hwaddr: string;
    host_name: string;
    mtu: number;
    state: string;
    type: string;
};

export type OsType = {
    os_type_id: number;
    os_image_name: string;
    os_image_version: string;
};

export type StoragePoolState = {
    inodes: StoragePoolUsage;
    space: StoragePoolUsage;
};

export type StoragePoolUsage = {
    total: number;
    used: number;
};

export type SysInfo = {
    buffered_ram: number;
    free_ram: number;
    free_swap: number;
    load_averages: Array<(number)>;
    logical_cpus: number;
    processes: number;
    shared_ram: number;
    total_ram: number;
    total_swap: number;
    uptime: number;
};

export type TransactionStatus = 'PENDING' | 'FAILED' | 'SUCCESS' | 'SCHEDULED' | 'PAID' | 'OVERDUE' | 'EXPIRED';

export type TransactionType = 'SUBSCRIPTION_PAYMENT' | 'TOP_UP';

export type UpcomingPayment = {
    sum_amount: number;
    total_subscription: number;
    earliest_due_date: string;
};

export type UserBillingOverviewResponse = {
    upcoming_payment: UpcomingPayment;
    all_time_payment: AllTimePayment;
    username: string;
};

export type UserCreateRequest = {
    username: string;
    email: string;
    password: string;
};

export type UserCreateResponse = {
    username: string;
    email: string;
    balance: number;
    created_at: Date;
};

export type UserInstanceFromDB = {
    instance_id?: (string | null);
    user_id?: (string | null);
    instance_plan_id: number;
    os_type_id: number;
    hostname: string;
    lxd_node_name: string;
    status: string;
    created_at?: (Date | null);
    last_updated_at: Date;
    instance_plan: InstancePlan;
    os_type: OsType;
};

export type UserInstanceResponse = {
    instance_id: string;
    instance_name: string;
    instance_status: string;
    instance_plan: InstancePlan;
    os_type: OsType;
    last_updated_at: Date;
};

export type UserLoginRequest = {
    username: string;
    password: string;
};

export type UserLoginResponse = {
    message: string;
};

export type UserRole = {
    role_id: number;
    role_name: string;
};

export type UserSessionResponse = {
    is_authenticated: boolean;
    username: (string | null);
    email: (string | null);
    role: (string | null);
};

export type UserTopUpRequest = {
    amount: number;
};

export type UserTopUpResponse = {
    transaction_id: string;
    transaction_type: string;
    transaction_status: string;
    amount: number;
    created_at: string;
    last_updated_at: string;
};

export type UserTransactionResponse = {
    transaction_id: string;
    transaction_type: TransactionType;
    transaction_status: TransactionStatus;
    amount: number;
    created_at: string;
    last_updated_at: string;
};

export type UserWalletResponse = {
    username: string;
    balance: number;
    last_updated_at: string;
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type AdminGetAllUsersResponse = (AdminUsersResponse);

export type AdminGetAllUsersError = unknown;

export type AdminGetInstancePlansResponse = (Array<AdminInstancePlan>);

export type AdminGetInstancePlansError = unknown;

export type AdminCreateInstancePlanData = {
    body: AdminInstancePlanCreateRequest;
};

export type AdminCreateInstancePlanResponse = (AdminInstancePlanCreateResponse);

export type AdminCreateInstancePlanError = (HTTPValidationError);

export type AdminUpdateInstancePlanData = {
    body: AdminInstancePlanUpdateRequest;
};

export type AdminUpdateInstancePlanResponse = (AdminInstancePlanUpdateResponse);

export type AdminUpdateInstancePlanError = (HTTPValidationError);

export type AdminDeleteInstancePlanData = {
    body: AdminInstancePlanDeleteRequest;
};

export type AdminDeleteInstancePlanResponse = (AdminInstancePlanDeleteResponse);

export type AdminDeleteInstancePlanError = (HTTPValidationError);

export type BillingGetBillingOverviewData = {
    path: {
        username: string;
    };
};

export type BillingGetBillingOverviewResponse = (UserBillingOverviewResponse);

export type BillingGetBillingOverviewError = (HTTPValidationError);

export type BillingGetAllUserTransactionsData = {
    path: {
        username: string;
    };
};

export type BillingGetAllUserTransactionsResponse = (Array<UserTransactionResponse>);

export type BillingGetAllUserTransactionsError = (HTTPValidationError);

export type BillingTopUpData = {
    body: UserTopUpRequest;
    path: {
        username: string;
    };
};

export type BillingTopUpResponse = (UserTopUpResponse);

export type BillingTopUpError = (HTTPValidationError);

export type BillingGetUserWalletData = {
    path: {
        username: string;
    };
};

export type BillingGetUserWalletResponse = (UserWalletResponse);

export type BillingGetUserWalletError = (HTTPValidationError);

export type ClusterCreateJoinTokenData = {
    body: CreateJoinTokenRequest;
};

export type ClusterCreateJoinTokenResponse = (CreateJoinTokenResponse);

export type ClusterCreateJoinTokenError = (HTTPValidationError);

export type ClusterAddMemberData = {
    body: AddMemberRequest;
};

export type ClusterAddMemberResponse = (AddMemberResponse);

export type ClusterAddMemberError = (HTTPValidationError);

export type ClusterGetMembersStateResponse = (GetClusterMembersStateInfoResponse);

export type ClusterGetMembersStateError = unknown;

export type InstanceInstanceDetailsResponse = (InstanceDetails);

export type InstanceInstanceDetailsError = unknown;

export type InstanceListInstancesData = {
    path: {
        username: string;
    };
};

export type InstanceListInstancesResponse = (Array<UserInstanceResponse>);

export type InstanceListInstancesError = (HTTPValidationError);

export type InstanceGetInstanceData = {
    path: {
        instance_name: string;
    };
};

export type InstanceGetInstanceResponse = (UserInstanceResponse);

export type InstanceGetInstanceError = (HTTPValidationError);

export type InstanceCreateInstanceData = {
    body: InstanceCreateRequest;
};

export type InstanceCreateInstanceResponse = (InstanceCreateResponse);

export type InstanceCreateInstanceError = (HTTPValidationError);

export type InstanceStartInstanceData = {
    path: {
        instance_name: string;
    };
};

export type InstanceStartInstanceResponse = (InstanceControlResponse);

export type InstanceStartInstanceError = (HTTPValidationError);

export type InstanceStopInstanceData = {
    path: {
        instance_name: string;
    };
};

export type InstanceStopInstanceResponse = (InstanceControlResponse);

export type InstanceStopInstanceError = (HTTPValidationError);

export type InstanceDeleteInstanceData = {
    path: {
        instance_name: string;
    };
};

export type InstanceDeleteInstanceResponse = (InstanceControlResponse);

export type InstanceDeleteInstanceError = (HTTPValidationError);

export type InstanceRestartInstanceData = {
    path: {
        instance_name: string;
    };
};

export type InstanceRestartInstanceResponse = (InstanceControlResponse);

export type InstanceRestartInstanceError = (HTTPValidationError);

export type InstanceGetInstanceStateData = {
    path: {
        instance_name: string;
    };
};

export type InstanceGetInstanceStateResponse = (BaseInstanceState);

export type InstanceGetInstanceStateError = (HTTPValidationError);

export type RootRootResponse = (unknown);

export type RootRootError = unknown;

export type UserCreateUserData = {
    body: UserCreateRequest;
};

export type UserCreateUserResponse = (UserCreateResponse);

export type UserCreateUserError = (HTTPValidationError);

export type UserLoginUserData = {
    body: UserLoginRequest;
};

export type UserLoginUserResponse = (UserLoginResponse);

export type UserLoginUserError = (HTTPValidationError);

export type UserGetUserSessionResponse = (UserSessionResponse);

export type UserGetUserSessionError = unknown;

export type UserLogoutUserResponse = (UserLoginResponse);

export type UserLogoutUserError = unknown;

export type AdminGetAllUsersResponseTransformer = (data: any) => Promise<AdminGetAllUsersResponse>;

export type AdminUsersResponseModelResponseTransformer = (data: any) => AdminUsersResponse;

export type AdminUserModelResponseTransformer = (data: any) => AdminUser;

export type UserInstanceFromDBModelResponseTransformer = (data: any) => UserInstanceFromDB;

export const UserInstanceFromDBModelResponseTransformer: UserInstanceFromDBModelResponseTransformer = data => {
    if (data?.last_updated_at) {
        data.last_updated_at = new Date(data.last_updated_at);
    }
    return data;
};

export const AdminUserModelResponseTransformer: AdminUserModelResponseTransformer = data => {
    if (Array.isArray(data?.instances)) {
        data.instances.forEach(UserInstanceFromDBModelResponseTransformer);
    }
    return data;
};

export const AdminUsersResponseModelResponseTransformer: AdminUsersResponseModelResponseTransformer = data => {
    if (Array.isArray(data?.users)) {
        data.users.forEach(AdminUserModelResponseTransformer);
    }
    return data;
};

export const AdminGetAllUsersResponseTransformer: AdminGetAllUsersResponseTransformer = async (data) => {
    AdminUsersResponseModelResponseTransformer(data);
    return data;
};

export type InstanceListInstancesResponseTransformer = (data: any) => Promise<InstanceListInstancesResponse>;

export type UserInstanceResponseModelResponseTransformer = (data: any) => UserInstanceResponse;

export const UserInstanceResponseModelResponseTransformer: UserInstanceResponseModelResponseTransformer = data => {
    if (data?.last_updated_at) {
        data.last_updated_at = new Date(data.last_updated_at);
    }
    return data;
};

export const InstanceListInstancesResponseTransformer: InstanceListInstancesResponseTransformer = async (data) => {
    if (Array.isArray(data)) {
        data.forEach(UserInstanceResponseModelResponseTransformer);
    }
    return data;
};

export type InstanceGetInstanceResponseTransformer = (data: any) => Promise<InstanceGetInstanceResponse>;

export const InstanceGetInstanceResponseTransformer: InstanceGetInstanceResponseTransformer = async (data) => {
    UserInstanceResponseModelResponseTransformer(data);
    return data;
};

export type InstanceCreateInstanceResponseTransformer = (data: any) => Promise<InstanceCreateInstanceResponse>;

export type InstanceCreateResponseModelResponseTransformer = (data: any) => InstanceCreateResponse;

export const InstanceCreateResponseModelResponseTransformer: InstanceCreateResponseModelResponseTransformer = data => {
    if (data?.created_at) {
        data.created_at = new Date(data.created_at);
    }
    return data;
};

export const InstanceCreateInstanceResponseTransformer: InstanceCreateInstanceResponseTransformer = async (data) => {
    InstanceCreateResponseModelResponseTransformer(data);
    return data;
};

export type UserCreateUserResponseTransformer = (data: any) => Promise<UserCreateUserResponse>;

export type UserCreateResponseModelResponseTransformer = (data: any) => UserCreateResponse;

export const UserCreateResponseModelResponseTransformer: UserCreateResponseModelResponseTransformer = data => {
    if (data?.created_at) {
        data.created_at = new Date(data.created_at);
    }
    return data;
};

export const UserCreateUserResponseTransformer: UserCreateUserResponseTransformer = async (data) => {
    UserCreateResponseModelResponseTransformer(data);
    return data;
};