// This file is auto-generated by @hey-api/openapi-ts

import type { Options } from '@hey-api/client-axios';
import { queryOptions, type UseMutationOptions } from '@tanstack/react-query';
import type { AdminAdminUpdateAdminData, AdminAdminUpdateAdminError, AdminAdminUpdateAdminResponse, ItemsItemsReadItemsData, ItemsItemsReadItemData, ItemsItemsUpdateItemData, ItemsItemsUpdateItemError, ItemsItemsUpdateItemResponse, TestapiReadTestapiData, UsersReadUserData } from '../types.gen';
import type { AxiosError } from 'axios';
import { client, AdminService, DefaultService, ItemsService, RootService, TestapiService, UsersService } from '../services.gen';

type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseURL' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): QueryKey<TOptions>[0] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseURL: (options?.client ?? client).getConfig().baseURL } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return params;
};

export const adminAdminUpdateAdminQueryKey = (options: Options<AdminAdminUpdateAdminData>) => [
    createQueryKey('adminAdminUpdateAdmin', options)
];

export const adminAdminUpdateAdminOptions = (options: Options<AdminAdminUpdateAdminData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await AdminService.adminAdminUpdateAdmin({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: adminAdminUpdateAdminQueryKey(options)
    });
};

export const adminAdminUpdateAdminMutation = (options?: Partial<Options<AdminAdminUpdateAdminData>>) => {
    const mutationOptions: UseMutationOptions<AdminAdminUpdateAdminResponse, AxiosError<AdminAdminUpdateAdminError>, Options<AdminAdminUpdateAdminData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await AdminService.adminAdminUpdateAdmin({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getQueryKey = (options?: Options) => [
    createQueryKey('get', options)
];

export const getOptions = (options?: Options) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await DefaultService.get({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getQueryKey(options)
    });
};

export const itemsItemsReadItemsQueryKey = (options: Options<ItemsItemsReadItemsData>) => [
    createQueryKey('itemsItemsReadItems', options)
];

export const itemsItemsReadItemsOptions = (options: Options<ItemsItemsReadItemsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await ItemsService.itemsItemsReadItems({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: itemsItemsReadItemsQueryKey(options)
    });
};

export const itemsItemsReadItemQueryKey = (options: Options<ItemsItemsReadItemData>) => [
    createQueryKey('itemsItemsReadItem', options)
];

export const itemsItemsReadItemOptions = (options: Options<ItemsItemsReadItemData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await ItemsService.itemsItemsReadItem({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: itemsItemsReadItemQueryKey(options)
    });
};

export const itemsItemsUpdateItemMutation = (options?: Partial<Options<ItemsItemsUpdateItemData>>) => {
    const mutationOptions: UseMutationOptions<ItemsItemsUpdateItemResponse, AxiosError<ItemsItemsUpdateItemError>, Options<ItemsItemsUpdateItemData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await ItemsService.itemsItemsUpdateItem({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const rootRootQueryKey = (options?: Options) => [
    createQueryKey('rootRoot', options)
];

export const rootRootOptions = (options?: Options) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await RootService.rootRoot({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: rootRootQueryKey(options)
    });
};

export const testapiReadTestapiQueryKey = (options: Options<TestapiReadTestapiData>) => [
    createQueryKey('testapiReadTestapi', options)
];

export const testapiReadTestapiOptions = (options: Options<TestapiReadTestapiData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await TestapiService.testapiReadTestapi({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: testapiReadTestapiQueryKey(options)
    });
};

export const usersReadUsersQueryKey = (options?: Options) => [
    createQueryKey('usersReadUsers', options)
];

export const usersReadUsersOptions = (options?: Options) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await UsersService.usersReadUsers({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: usersReadUsersQueryKey(options)
    });
};

export const usersReadUserMeQueryKey = (options?: Options) => [
    createQueryKey('usersReadUserMe', options)
];

export const usersReadUserMeOptions = (options?: Options) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await UsersService.usersReadUserMe({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: usersReadUserMeQueryKey(options)
    });
};

export const usersReadUserQueryKey = (options: Options<UsersReadUserData>) => [
    createQueryKey('usersReadUser', options)
];

export const usersReadUserOptions = (options: Options<UsersReadUserData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await UsersService.usersReadUser({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: usersReadUserQueryKey(options)
    });
};