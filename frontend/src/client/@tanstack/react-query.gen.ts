// This file is auto-generated by @hey-api/openapi-ts

import type { Options } from '@hey-api/client-axios';
import { queryOptions, type UseMutationOptions } from '@tanstack/react-query';
import { client, InstanceService, RootService, UserService } from '../services.gen';
import type { InstanceCreateInstanceData, InstanceCreateInstanceError, InstanceCreateInstanceResponse, UserCreateUserData, UserCreateUserError, UserCreateUserResponse, UserLoginUserData, UserLoginUserError, UserLoginUserResponse, UserLogoutUserError, UserLogoutUserResponse } from '../types.gen';
import type { AxiosError } from 'axios';

type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseURL' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): QueryKey<TOptions>[0] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseURL: (options?.client ?? client).getConfig().baseURL } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return params;
};

export const instanceInstanceDetailsQueryKey = (options?: Options) => [
    createQueryKey('instanceInstanceDetails', options)
];

export const instanceInstanceDetailsOptions = (options?: Options) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await InstanceService.instanceInstanceDetails({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: instanceInstanceDetailsQueryKey(options)
    });
};

export const instanceListInstancesQueryKey = (options?: Options) => [
    createQueryKey('instanceListInstances', options)
];

export const instanceListInstancesOptions = (options?: Options) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await InstanceService.instanceListInstances({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: instanceListInstancesQueryKey(options)
    });
};

export const instanceCreateInstanceQueryKey = (options: Options<InstanceCreateInstanceData>) => [
    createQueryKey('instanceCreateInstance', options)
];

export const instanceCreateInstanceOptions = (options: Options<InstanceCreateInstanceData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await InstanceService.instanceCreateInstance({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: instanceCreateInstanceQueryKey(options)
    });
};

export const instanceCreateInstanceMutation = (options?: Partial<Options<InstanceCreateInstanceData>>) => {
    const mutationOptions: UseMutationOptions<InstanceCreateInstanceResponse, AxiosError<InstanceCreateInstanceError>, Options<InstanceCreateInstanceData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await InstanceService.instanceCreateInstance({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const rootRootQueryKey = (options?: Options) => [
    createQueryKey('rootRoot', options)
];

export const rootRootOptions = (options?: Options) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await RootService.rootRoot({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: rootRootQueryKey(options)
    });
};

export const userCreateUserQueryKey = (options: Options<UserCreateUserData>) => [
    createQueryKey('userCreateUser', options)
];

export const userCreateUserOptions = (options: Options<UserCreateUserData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await UserService.userCreateUser({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: userCreateUserQueryKey(options)
    });
};

export const userCreateUserMutation = (options?: Partial<Options<UserCreateUserData>>) => {
    const mutationOptions: UseMutationOptions<UserCreateUserResponse, AxiosError<UserCreateUserError>, Options<UserCreateUserData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await UserService.userCreateUser({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const userLoginUserQueryKey = (options: Options<UserLoginUserData>) => [
    createQueryKey('userLoginUser', options)
];

export const userLoginUserOptions = (options: Options<UserLoginUserData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await UserService.userLoginUser({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: userLoginUserQueryKey(options)
    });
};

export const userLoginUserMutation = (options?: Partial<Options<UserLoginUserData>>) => {
    const mutationOptions: UseMutationOptions<UserLoginUserResponse, AxiosError<UserLoginUserError>, Options<UserLoginUserData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await UserService.userLoginUser({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const userGetUserSessionQueryKey = (options?: Options) => [
    createQueryKey('userGetUserSession', options)
];

export const userGetUserSessionOptions = (options?: Options) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await UserService.userGetUserSession({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: userGetUserSessionQueryKey(options)
    });
};

export const userLogoutUserQueryKey = (options?: Options) => [
    createQueryKey('userLogoutUser', options)
];

export const userLogoutUserOptions = (options?: Options) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await UserService.userLogoutUser({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: userLogoutUserQueryKey(options)
    });
};

export const userLogoutUserMutation = (options?: Partial<Options>) => {
    const mutationOptions: UseMutationOptions<UserLogoutUserResponse, AxiosError<UserLogoutUserError>, Options> = {
        mutationFn: async (localOptions) => {
            const { data } = await UserService.userLogoutUser({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};